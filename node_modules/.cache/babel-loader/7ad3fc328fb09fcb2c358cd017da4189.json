{"ast":null,"code":"var _jsxFileName = \"/home/claude/memory-game-rebuild/src/App.js\";\nimport React, { PureComponent } from \"react\";\nimport Header from \"./components/header/Header\";\nimport Card from \"./components/card/Card\";\nimport GameOver from \"./components/card/GameOver\";\nimport \"./styles/main.css\";\n\nclass App extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isFlipped: Array(30).fill(false),\n      shuffledCard: App.duplicateCard().sort(() => Math.random() - 0.5),\n      clickCount: 1,\n      prevSelectedCard: -1,\n      prevCardId: -1\n    };\n\n    this.handleClick = event => {\n      event.preventDefault();\n      const cardId = event.target.id;\n      const newFlipps = this.state.isFlipped.slice();\n      this.setState({\n        prevSelectedCard: this.state.shuffledCard[cardId],\n        prevCardId: cardId\n      });\n\n      if (newFlipps[cardId] === false) {\n        newFlipps[cardId] = !newFlipps[cardId];\n        this.setState(prevState => ({\n          isFlipped: newFlipps,\n          clickCount: this.state.clickCount + 1\n        }));\n\n        if (this.state.clickCount === 2) {\n          this.setState({\n            clickCount: 1\n          });\n          const prevCardId = this.state.prevCardId;\n          const newCard = this.state.shuffledCard[cardId];\n          const previousCard = this.state.prevSelectedCard;\n          this.isCardMatch(previousCard, newCard, prevCardId, cardId);\n        }\n      }\n    };\n\n    this.isCardMatch = (card1, card2, card1Id, card2Id) => {\n      if (card1 === card2) {\n        const hideCard = this.state.shuffledCard.slice();\n        hideCard[card1Id] = -1;\n        hideCard[card2Id] = -1;\n        setTimeout(() => {\n          this.setState(prevState => ({\n            shuffledCard: hideCard\n          }));\n        }, 1000);\n      } else {\n        const flipBack = this.state.isFlipped.slice();\n        flipBack[card1Id] = false;\n        flipBack[card2Id] = false;\n        setTimeout(() => {\n          this.setState(prevState => ({\n            isFlipped: flipBack\n          }));\n        }, 1000);\n      }\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        isFlipped: Array(30).fill(false),\n        shuffledCard: App.duplicateCard().sort(() => Math.random() - 0.5),\n        clickCount: 1,\n        prevSelectedCard: -1,\n        prevCardId: -1\n      });\n    };\n\n    this.isGameOver = () => {\n      return this.state.isFlipped.every((element, index, array) => element !== false);\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Header, {\n      restartGame: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), this.isGameOver() ? React.createElement(GameOver, {\n      restartGame: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      className: \"grid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, this.state.shuffledCard.map((cardNumber, index) => React.createElement(Card, {\n      key: index,\n      id: index,\n      cardNumber: cardNumber,\n      isFlipped: this.state.isFlipped[index],\n      handleClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nApp.duplicateCard = () => {\n  return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14].reduce((preValue, current, index, array) => {\n    return preValue.concat([current, current]);\n  }, []);\n};\n\nexport default App;","map":{"version":3,"sources":["/home/claude/memory-game-rebuild/src/App.js"],"names":["React","PureComponent","Header","Card","GameOver","App","state","isFlipped","Array","fill","shuffledCard","duplicateCard","sort","Math","random","clickCount","prevSelectedCard","prevCardId","handleClick","event","preventDefault","cardId","target","id","newFlipps","slice","setState","prevState","newCard","previousCard","isCardMatch","card1","card2","card1Id","card2Id","hideCard","setTimeout","flipBack","restartGame","isGameOver","every","element","index","array","render","map","cardNumber","reduce","preValue","current","concat"],"mappings":"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","sourcesContent":["import React, { PureComponent } from \"react\";\nimport Header from \"./components/header/Header\";\nimport Card from \"./components/card/Card\";\nimport GameOver from \"./components/card/GameOver\";\n\nimport \"./styles/main.css\";\n\nclass App extends PureComponent {\n  state = {\n    isFlipped: Array(30).fill(false),\n    shuffledCard: App.duplicateCard().sort(() => Math.random() - 0.5),\n    clickCount: 1,\n    prevSelectedCard: -1,\n    prevCardId: -1\n  };\n\n  static duplicateCard = () => {\n    return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14].reduce(\n      (preValue, current, index, array) => {\n        return preValue.concat([current, current]);\n      },\n      []\n    );\n  };\n\n  handleClick = event => {\n    event.preventDefault();\n    const cardId = event.target.id;\n    const newFlipps = this.state.isFlipped.slice();\n    this.setState({\n      prevSelectedCard: this.state.shuffledCard[cardId],\n      prevCardId: cardId\n    });\n\n    if (newFlipps[cardId] === false) {\n      newFlipps[cardId] = !newFlipps[cardId];\n      this.setState(prevState => ({\n        isFlipped: newFlipps,\n        clickCount: this.state.clickCount + 1\n      }));\n\n      if (this.state.clickCount === 2) {\n        this.setState({ clickCount: 1 });\n        const prevCardId = this.state.prevCardId;\n        const newCard = this.state.shuffledCard[cardId];\n        const previousCard = this.state.prevSelectedCard;\n\n        this.isCardMatch(previousCard, newCard, prevCardId, cardId);\n      }\n    }\n  };\n\n  isCardMatch = (card1, card2, card1Id, card2Id) => {\n    if (card1 === card2) {\n      const hideCard = this.state.shuffledCard.slice();\n      hideCard[card1Id] = -1;\n      hideCard[card2Id] = -1;\n      setTimeout(() => {\n        this.setState(prevState => ({\n          shuffledCard: hideCard\n        }));\n      }, 1000);\n    } else {\n      const flipBack = this.state.isFlipped.slice();\n      flipBack[card1Id] = false;\n      flipBack[card2Id] = false;\n      setTimeout(() => {\n        this.setState(prevState => ({ isFlipped: flipBack }));\n      }, 1000);\n    }\n  };\n\n  restartGame = () => {\n    this.setState({\n      isFlipped: Array(30).fill(false),\n      shuffledCard: App.duplicateCard().sort(() => Math.random() - 0.5),\n      clickCount: 1,\n      prevSelectedCard: -1,\n      prevCardId: -1\n    });\n  };\n\n  isGameOver = () => {\n    return this.state.isFlipped.every(\n      (element, index, array) => element !== false\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <Header restartGame={this.restartGame} />\n        {this.isGameOver() ? (\n          <GameOver restartGame={this.restartGame} />\n        ) : (\n          <div className=\"grid-container\">\n            {this.state.shuffledCard.map((cardNumber, index) => (\n              <Card\n                key={index}\n                id={index}\n                cardNumber={cardNumber}\n                isFlipped={this.state.isFlipped[index]}\n                handleClick={this.handleClick}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}